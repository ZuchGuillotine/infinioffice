generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Organization {
  id             String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name           String
  plan           String          @default("starter")
  smsBranding    String?
  twilioNumber   String?         @unique @db.VarChar(20)
  createdAt      DateTime        @default(now()) @db.Timestamptz(6)
  updatedAt      DateTime        @updatedAt @db.Timestamptz(6)
  appointments   Appointment[]
  businessConfig BusinessConfig?
  calls          Call[]
  integrations   Integration[]
  users          User[]
}

model User {
  id             String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  organizationId String       @db.Uuid
  email          String       @unique
  role           String       @default("operator")
  googleId       String?      @unique
  createdAt      DateTime     @default(now()) @db.Timestamptz(6)
  updatedAt      DateTime     @updatedAt @db.Timestamptz(6)
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
}

model BusinessConfig {
  id               String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  organizationId   String       @unique @db.Uuid
  businessHours    Json?
  holidays         Json?
  services         Json?
  providers        Json?
  escalationNumber String?
  smsCopy          String?
  greeting         String?
  timezone         String       @default("America/New_York")
  scripts          Json?
  rules            Json?
  voiceSettings    Json?
  createdAt        DateTime     @default(now()) @db.Timestamptz(6)
  updatedAt        DateTime     @updatedAt @db.Timestamptz(6)
  organization     Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
}

model Integration {
  id             String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  organizationId String       @db.Uuid
  type           String
  oauthTokens    Json?
  scopes         Json?
  status         String       @default("pending")
  externalId     String?
  createdAt      DateTime     @default(now()) @db.Timestamptz(6)
  updatedAt      DateTime     @updatedAt @db.Timestamptz(6)
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@unique([organizationId, type])
}

model Call {
  id              String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  organizationId  String?       @db.Uuid
  twilioCallSid   String?       @db.VarChar(100)
  callerPhone     String?       @db.VarChar(20)
  status          String?       @db.VarChar(50)
  currentState    String?       @db.VarChar(100)
  context         Json?
  finalContext    Json?
  durationSeconds Int?
  totalTurns      Int?
  transcript      String?
  recordingUrl    String?
  metadata        Json?
  error           String?
  startedAt       DateTime?     @db.Timestamptz(6)
  endedAt         DateTime?     @db.Timestamptz(6)
  lastTransition  DateTime?     @db.Timestamptz(6)
  createdAt       DateTime      @default(now()) @db.Timestamptz(6)
  organization    Organization? @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  turns           Turn[]
}

model Turn {
  id            BigInt   @id @default(autoincrement())
  callId        String   @db.Uuid
  turnIndex     Int
  asrMs         Int?
  llmMs         Int?
  ttsMs         Int?
  transcriptIn  String?
  transcriptOut String?
  createdAt     DateTime @default(now()) @db.Timestamptz(6)
  call          Call     @relation(fields: [callId], references: [id], onDelete: Cascade)
}

model Appointment {
  id               String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  organizationId   String       @db.Uuid
  externalId       String?
  calendarProvider String?      @db.VarChar
  startAt          DateTime     @db.Timestamptz(6)
  endAt            DateTime     @db.Timestamptz(6)
  service          String?
  provider         String?
  contactPhone     String?      @db.VarChar(20)
  notes            String?
  status           String?      @db.VarChar
  createdAt        DateTime     @default(now()) @db.Timestamptz(6)
  organization     Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
}
